import pandas as pd
import requests
from bs4 import BeautifulSoup
from transformers import pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from flask import Flask, request, jsonify

# Initialize Flask app
app = Flask(__name__)

# News scraping function
def scrape_news():
    """Scrape news articles from a sample site."""
    url = "https://news.ycombinator.com/"
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')

    headlines = []
    links = []

    for item in soup.select('.storylink'):
        headlines.append(item.text)
        links.append(item['href'])

    return pd.DataFrame({'headline': headlines, 'link': links})

# Preprocess articles
def preprocess_articles(df):
    """Preprocess headlines for vectorization."""
    tfidf = TfidfVectorizer(stop_words='english')
    vectors = tfidf.fit_transform(df['headline'])
    return tfidf, vectors

# Recommend articles
def recommend_articles(user_input, tfidf, vectors, df):
    """Recommend articles based on user input."""
    user_vector = tfidf.transform([user_input])
    similarity = cosine_similarity(user_vector, vectors)
    df['similarity'] = similarity.flatten()
    recommendations = df.sort_values('similarity', ascending=False).head(5)
    return recommendations[['headline', 'link']].to_dict(orient='records')

# Route: Scrape and preprocess
@app.route('/scrape', methods=['GET'])
def scrape():
    global news_df, tfidf, vectors
    news_df = scrape_news()
    tfidf, vectors = preprocess_articles(news_df)
    return jsonify({"message": "News articles scraped and processed", "count": len(news_df)})

# Route: Recommend news
@app.route('/recommend', methods=['POST'])
def recommend():
    data = request.get_json()
    if not data or 'query' not in data:
        return jsonify({"error": "Query not provided"}), 400

    query = data['query']
    recommendations = recommend_articles(query, tfidf, vectors, news_df)
    return jsonify({"recommendations": recommendations})

if __name__ == '__main__':
    # Scrape news on startup
    news_df = scrape_news()
    tfidf, vectors = preprocess_articles(news_df)

    # Run the app
    app.run(debug=True)
